play {
  server {
    netty {
      # The maximum length of the initial line. This effectively restricts the maximum length of a URL that the server will
      # accept, the initial line consists of the method (3-7 characters), the URL, and the HTTP version (8 characters),
      # including typical whitespace, the maximum URL length will be this number - 18.
      maxInitialLineLength = 2048 # 4096

      # The maximum length of the HTTP headers. The most common effect of this is a restriction in cookie length, including
      # number of cookies and size of cookie values.
      maxHeaderSize = 4096 # 8192
    }
  }
  i18n {
    langs=[en]
  }
  http {
    session {
      cookieName = "vndocs"
      maxAge = 365 days
    }
  }
  ws {
    useragent = ${net.base_url}
    compressionEnabled = true
    timeout {
      connection = 5 seconds
      idle = 5 minutes
      request = 5 minutes
    }
  }
  crypto {
    secret="CiebwjgIM9cHQ;I?Xk:sfqDJ;BhIe:jsL?r=?IPF[saf>s^r0]?0grUq4>q?5mP^"
  }
}

parsers.MultipartFormData.maxLength=10240K

play.modules.enabled += "play.modules.reactivemongo.ReactiveMongoModule"

# Simple configuration (by URI)
mongodb {
  uri = "mongodb://127.0.0.1:27017/shopluulinh"
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = INFO
  stdout-loglevel = INFO
  log-config-on-start = off
  log-dead-letters-during-shutdown = off
}
mongo-async-driver.akka = ${akka}

memo = {
  collection.cache = "cache"
  collection.setup = "memo_setup"
  collection.userMessage = "userMessage"
  collection.socketMessage = "socketMessage"
  collection.notifyMessage = "notifyMessage"
}

hub {
  actor {
    user_message = ${userMessage.actor.name}
    chat_room = ${chatRoom.actor.name}
    game {
      actor = ${game.actor.name}
      search = ${gameSearch.actor.name}
    }
    renderer = ${app.renderer.name}
    captcher = ${game.captcher.name}
    forum {
      actor = ${forum.actor.name}
      search = ${forumSearch.actor.name}
    }
    team {
      search = ${teamSearch.actor.name}
    }
    messenger = ${message.actor.name}
    router = ${app.router.name}
    ai = ${ai.actor.name}
    monitor = ${monitor.actor.name}
    tournament.organizer = ${tournament.organizer.name}
    timeline {
      user = ${timeline.user.actor.name}
    }
    bookmark = ${bookmark.actor.name}
    round {
      map = ${round.actor.map.name}
    }
    lobby = ${lobby.actor.name}
    relation = ${relation.actor.name}
    challenger = ${setup.challenger.name}
    report = ${report.actor.name}
    shutup = ${shutup.actor.name}
    mod = ${mod.actor.name}
    chat = ${chat.actor.name}
    analyser = ${analyse.actor.name}
    move_broadcast = ${socket.move_broadcast.name}
    user_register = ${socket.user_register.name}
    simul = ${simul.actor.name}
  }
  socket {
    lobby = ${lobby.socket.name}
    monitor = ${monitor.socket.name}
    site = ${site.socket.name}
    round = ${round.socket.name}
    tournament = ${tournament.socket.name}
    simul = ${simul.socket.name}
    hub = ${socket.hub.name}
  }
  channel {
    move_lat = ${monitor.channel.move_lat}
  }
}

setup {
  friend.memo.ttl = 1 day
  casual_only = ${app.casual_only}
  collection {
    user_config = config
    anon_config = config_anon
  }
  challenger.name = "setup-challenger"
}

timeline {
  collection {
    unsub = timeline_unsub
    entry = timeline_entry
  }
  user {
    display_max = 12
    actor.name = user-timeline
  }
}

report {
  collection.report = report
  actor.name = report
}

chat {
  collection.chat = chat
  max_lines = 50
  net.domain = ${net.domain}
  actor.name = chat
}

message {
  thread.max_per_page = 30
  collection.thread = m_thread
  actor.name = message
  lichess_senders = [
  ]
}

lobby {
  message.ttl = 30 seconds
  orphan_hook.ttl = 5 seconds
  socket {
    name = lobby-socket
    uid.ttl = ${site.socket.uid.ttl}
  }
  actor.name = lobby-actor
  net.domain = ${net.domain}
  broom_period = 1 second
  resync_ids_period = 15 seconds
  collection.seek = seek
  collection.seek_archive = seek_archive
  seek {
    max_per_page = 14
    max_per_user = 5
  }
}

round {
  active.ttl = 30 seconds
  uid.timeout = 10 seconds
  finisher.lock.timeout = 20 seconds
  animation.duration = ${chessground.animation.duration}
  moretime = 15 seconds
  casual_only = ${app.casual_only}
  player {
    disconnect.timeout = 90 seconds
    ragequit.timeout = 10 seconds
  }
  socket {
    name = round-socket
    timeout = 30 seconds
  }
  actor.map.name = round-map
  collection {
    note = game_note
    history = round_history
    forecast = forecast
  }
  net.domain = ${net.domain}
}

bookmark {
  collection.bookmark = bookmark
  paginator.max_per_page = ${game.paginator.max_per_page}
  actor.name = bookmark
}


forumSearch {
  index = forum
  paginator.max_per_page = 10
  actor.name = forum-search
}


forum {
  topic.max_per_page = 10
  post.max_per_page = 10
  recent {
    ttl = 1 hour
    nb = 20
  }
  collection {
    categ = f_categ
    topic = f_topic
    post = f_post
  }
  public_categ_ids = [
    general-chess-discussion
    game-analysis
    lichess-feedback
    off-topic-discussion
  ]
  actor.name = forum
}

analyse {
  collection.analysis = analysis2
  net.domain = ${net.domain}
  cached.nb.ttl = ${game.cached.nb.ttl}
  paginator.max_per_page = ${game.paginator.max_per_page}
  actor.name = analyser
}

simul {
  collection {
    simul = simul
  }
  sequencer {
    map_name = simul-sequencers
    timeout = 10 minutes
  }
  socket {
    name = simul-socket
    timeout = 5 minutes
  }
  created.cache.ttl = 2 seconds
  history.message.ttl = 30 seconds
  uid.timeout = 7 seconds # small to avoid missed events
  actor.name = simul
}

tournament {
  collection {
    tournament = tournament2
    player = tournament_player
    pairing = tournament_pairing
  }
  history.message.ttl = 30 seconds
  uid.timeout = 7 seconds # small to avoid missed events
  socket {
    name = tournament-socket
    timeout = 2 minutes
  }
  organizer.name = tournament-organizer
  reminder.name = tournament-reminder
  sequencer {
    map_name = tournament-sequencers
    timeout = 10 minutes
  }
  pairing.delay = 3.1 seconds
  created.cache.ttl = 2 seconds
  leaderboard.cache.ttl = 1 hour
  ranking.cache.ttl = 1 hour
  net.domain = ${net.domain}
}

es {
  host = "107.0.0.1"
  port = 9200
  cluster = "cluster"
}

search = {
  es = {
    host = "107.0.0.1"
    port = 9200
    cluster = "cluster"
  }

  indexes_to_optimize = []
}

indexes_to_optimize = "indexes_to_optimize"

app {
  scheduler {
    disabled = false
    debug = false
  }
  renderer.name = "renderer"
  router.name = "router"
  web_path = "public"
  casual_only = false
}

paginator {
  max_per_page: 10
}

userSearch = {
  index = "np"
  type = "user"
  paginator = {
    max_per_page = 10
  }
  indexer = {
    name = "userIndexer"
  }
}


mod {
  collection {
    modlog = modlog
    player_assessment = player_assessment
    boosting = boosting
  }
  boosting.nb_games_to_mark = 5
  boosting.ratio_games_to_mark = 0.01
  actor.name = mod
}


collection = {
  //userMessage = "userMessage"
  setup = "setup"
  category = "category"
  user = "user"
}

ai {
  exec_path = "local/Stockfish/src/stockfish"
  hash_size = 64
  threads = 1
  instances = 2
  debug = false
  endpoint = ${net.base_url}/ai
  callback_url = ${net.protocol}en.${net.domain}/%/post-analysis
  server-only = false
  play {
    movetime = 500 ms
    timeout = 5 seconds
  }
  analyse {
    max_plies = 200
    movetime = 1500 ms
  }
  collection.ai_perf = "ai_perf"
  ai_perf.cache_ttl = 5 seconds
  actor.name = ai
}

gridfs = {
  collection = {
    image = "image"
  }
}


security = {
  collection {
    security = "security"
  }
  wiretap = {
    ips = ["192.168.1.1"]
  }
  firewall = {
    enabled = false
    cached = {
      ips = {
        ttl = 3600
      }
    }
    cookie = {
      name = "cookiename"
      enabled = false
    }

    collection = {
      firewall = "firewall"
    }
  }

  flood = {
    duration = 60
  }

  geoip = {
    file = "/tmp"
    cache_ttl = 3600
  }

  email_confirm {
    mailgun {
      api {
        url = ""
        key = ""
      }
      sender = ""
      base_url = ""
    }

    secret = ""
  }

  password_reset {
    mailgun {
      api {
        url = ""
        key = ""
      }
      sender = ""
      base_url = ""
    }

    secret = ""
  }

  tor {
    provider_url = "localhost:9000"
    refresh_delay = 60
  }
  disposable_email{
    provider_url = "localhost:9000"
    refresh_delay = 60
  }
}


cli {
  username = "apiUsername"
}


api {
  token = "apiToken"
}

prismic{
  api_url = ""
}

editor {
  animation {
    duration = 60
  }
}

accessibility {
  blind {
    cookie {
      name = ""
      max_age = 3600
      salt = ""
    }
  }
}

i18n {
  web_path{
    relative = "relative"
  }
  file_path{
    relative = ""
  }
  upstream{
    url_pattern = ""
  }
  hide_calls{
    cookie {
      name = ""
      max_age = 3600
    }
  }

  collection{
    translation = "translation"
  }

  context {
    git {
      url = ""
      file = ""
    }
  }

  #cdn_domain = "localhost:9000"
  cdn_domain = "192.168.1.25:9000"

  request_handler{
    protocol = "http"
  }

  call {
    threshold = 1000
  }
}

net {
  domain = "luanlv.info"
  protocol = "http://"
  base_url = ${net.protocol}${net.domain}
  base_en_url = ${net.protocol}en.${net.domain}
  ip = "188.166.254.203"
  asset {
    domain = ${net.domain}
    version = 26
  }
}

game {
  cached {
    nb {
      ttl = 3600
    }
  }
  paginator{
    max_per_page = 10
  }

  captcher {
    name = "captcher"
    duration = 10
  }

  collection{
    game = "collGame"
    crosstable = "crosstable"
  }
  js_path{
    raw = ""
    compiled = ""
  }

  actor {
    name = "actorGame"
  }

  uci_memo {
    ttl = 3600
  }
  net {
    base_url = ""
  }
  pdf {
    exec_path = ""
  }

  png{
    exec_path = ""
  }

  mandatory{
    seconds_to_move = 60
  }
}


gameSearch {
  index = game
  paginator.max_per_page = ${game.paginator.max_per_page}
  actor.name = game-search
}


shutup {
  collection.shutup = shutup
  actor.name = shutup
}


net {
  extra_ports = ["9000", "8080"]
}

product {
  collection {
    product = "product"
    category = "category"
    infolist = "infolist"
  }
}


site {
  socket {
    uid {
      ttl = 3600
    }
    name = "socket_site"
  }


}

socket {
  hub.name = socket.hub
  move_broadcast.name = socket.move-broadcast
  user_register.name = socket.user-register
  population.name = socket.population
}

monitor {
  actor.name = monitor-actor
  socket.name = monitor-socket
  socket.uid.ttl = ${site.socket.uid.ttl}
  channel.move_lat = monitor-move-lat
}

chessground {
  animation {
    duration = 250 ms
  }
}

pref {
  collection {
    pref = "pref"
  }
  cache {
    ttl = 10
  }
}

chatRoom {
  actor {
    name: "chat_room"
  }
  collection.roomInfo = "roomInfo"
  collection.roomMessage = "roomMessage"
}

userMessage {
  actor {
    name: "user_message"
  }
  collection.userMessage = "userMessage"
  collection.notify = "notify"
}

team {
  collection{
    team = team
    member = team_member
    request = team_request
  }
  notifier.sender = lichess-team
  paginator.max_per_page = 15
  paginator.max_user_per_page = 24
}

teamSearch {
  index = team
  paginator.max_per_page = ${team.paginator.max_per_page}
  actor.name = team-search
}

relation {
  collection {
    relation = "relation"
  }
  actor {
    notify_freq = 3
    name = "relation_actor"
  }
  limit {
    follow = 100
    block = 100
  }
}

dbplugin = disabled
ehcacheplugin = disabled


forcedev = false

